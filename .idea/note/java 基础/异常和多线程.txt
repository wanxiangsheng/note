异常
    指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。
    Throwable体系
            Error:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。
            Exception:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好
            public void printStackTrace() :打印异常的详细信息。
            public String getMessage() :获取发生异常的原因。
            public String toString() :获取异常的类型和异常描述信息(不用)。
    编译时期异常:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)
    运行时期异常:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。
异常的处理
        抛出异常throw
            1. 创建一个异常对象。封装一些提示信息(信息可以自己编写)。
            2. 需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字throw
            就可以完成。throw 异常对象。
            throw new 异常类名(参数);
        Objects非空判断
                public static <T> T requireNonNull(T obj) :查看指定引用对象不是null。
         声明异常throws
                修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…{   } 
         捕获异常try…catch
                    1. 该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。
                    2. 在方法中使用try-catch的语句块来处理异常。
           finally 代码块
                    有一些特定的代码无论异常是否发生，都需要执行
            异常注意事项
                    1. 多个异常分别处理。
                    2. 多个异常一次捕获，多次处理。
                    3. 多个异常一次捕获一次处理。
多线程
        并发与并行
                并发：指两个或多个事件在同一个时间段内发生。
                并行：指两个或多个事件在同一时刻发生（同时发生）。
        线程与进程
                进程：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多
                个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创
                建、运行到消亡的过程。
                线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程
                中是可以有多个线程的，这个应用程序也可以称之为多线程程序。
        线程调度:
                分时调度
                所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。
                抢占式调度
                优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为
                抢占式调度。
        创建线程类
                ava使用 java.lang.Thread 类代表线程，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是
                完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。
                Java中通过继承Thread类来创建并启动多线程的步骤如下：
                1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把
                run()方法称为线程执行体。
                2. 创建Thread子类的实例，即创建了线程对象
                3. 调用线程对象的start()方法来启动该线程
                每一个执行线程都有一片自己所属的栈内存空间
        Thread 类
                public Thread() :分配一个新的线程对象。
                public Thread(String name) :分配一个指定名字的新的线程对象。
                public Thread(Runnable target) :分配一个带有指定目标新的线程对象。
                public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。
                public String getName() :获取当前线程名称。
                public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。
                public void run() :此线程要执行的任务在此处定义代码。
                public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。
                public static Thread currentThread() :返回对当前正在执行的线程对象的引用。
         创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式
                1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。
                2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正
                的线程对象。
                3. 调用线程对象的start()方法来启动线程。
         Thread 和Runnable的区别
                实现Runnable接口比继承Thread类所具有的优势：
                1. 适合多个相同的程序代码的线程去共享同一个资源。
                2. 可以避免java中的单继承的局限性。
                3. 增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。
                4. 线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。
     线程安全
            线程同步
                    多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制
                    (synchronized)来解决。
                    1 . 同步代码块。
                    2. 同步方法。
                    3. 锁机制。
              同步代码块 ： synchronized 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。
              synchronized(同步锁){
                   需要同步操作的代码
              }
              同步锁:
                    1. 锁对象 可以是任意类型。
                    2. 多个线程对象 要使用同一把锁。
               同步方法
                    使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外
                    等着。
                    public synchronized void method(){
                       可能会产生线程安全问题的代码
                    }
               Lock 锁
                    Lock锁也称同步锁，加锁与释放锁方法化了，如下：
                    public void lock() :加同步锁。
                    public void unlock() :释放同步锁。
       线程池概念
       线程池：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，
           无需反复创建线程而消耗过多资源。
           1. 降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。
           2. 提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。
           3. 提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内
           存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。
    Lambda表达式