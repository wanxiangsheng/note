Collection集合
        Collection是所有单列集合的父接口
        * `public boolean add(E e)`：  把给定的对象添加到当前集合中 。
        * `public void clear()` :清空集合中所有的元素。
        * `public boolean remove(E e)`: 把给定的对象在当前集合中删除。
        * `public boolean contains(E e)`: 判断当前集合中是否包含给定的对象。
        * `public boolean isEmpty()`: 判断当前集合是否为空。
        * `public int size()`: 返回集合中元素的个数。
        * `public Object[] toArray()`: 把集合中的元素，存储到数组中。
Iterator迭代器
        `public Iterator iterator()`: 获取集合对应的迭代器，用来遍历集合中的元素的。
        * `public E next()`:返回迭代的下一个元素。
        * `public boolean hasNext()`:如果仍有元素可以迭代，则返回 true。
增强for
        for(元素的数据类型  变量 : Collection集合or数组){
          	//写操作代码
        }
泛型
        修饰符 class 类名<代表泛型的变量> {  }
        在创建对象的时候确定泛型
        含有泛型的方法
            修饰符 <代表泛型的变量> 返回值类型 方法名(参数){  }
            **调用方法时，确定泛型的类型*
         含有泛型的接口
                修饰符 interface接口名<代表泛型的变量> {  }
                定义类时确定泛型的类型**
                始终不确定泛型的类型，直到创建对象时，确定泛型的类型**
         泛型通配符
                **不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。**
        通配符高级使用----受限泛型
        **泛型的上限**：
        * **格式**： `类型名称 <? extends 类 > 对象名称`
        * **意义**： `只能接收该类型及其子类`
        **泛型的下限**：
        - **格式**： `类型名称 <? super 类 > 对象名称`
        - **意义**： `只能接收该类型及其父类型`
数据结构
        数据存储的常用结构有：栈、队列、数组、链表和红黑树
        栈：stack,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其
        他任何位置进行添加、查找、删除等操作。
        压栈：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。
        弹栈：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。
        队列：queue,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，
        而在表的另一端进行删除。
        先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山
        洞，车头先进去，车尾后进去；车头先出来，车尾后出来。
        数组:Array,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。
             查找元素快 增删元素慢
         链表:linked list,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。
         一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域
                查找元素慢 增删元素快
          红黑树
            二叉树：binary tree ,是每个结点不超过2的有序树（tree）
            红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然
            是一颗二叉查找树。也就意味着，树的键值仍然是有序的。
            红黑树的约束:
            1. 节点可以是红色的或者黑色的
            2. 根节点是黑色的
            3. 叶子节点(特指空节点)是黑色的
            4. 每个红色节点的子节点都是黑色的
            5. 任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同
            红黑树的特点:
            速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍
List集合
            1. 它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、
            22、33的顺序完成的）。
            2. 它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。
            3. 集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。
            public void add(int index, E element) : 将指定的元素，添加到该集合中的指定位置上。
            public E get(int index) :返回集合中指定位置的元素。
            public E remove(int index) : 移除列表中指定位置的元素, 返回的是被移除的元素。
            public E set(int index, E element) :用指定元素替换集合中指定位置的元素,返回值的更新前的元素。
            ArrayList集合
                        存储的结构是数组结构。元素增删慢，查找快，查询数据、遍历数据
             LinkedList集合
                      双向链表      集合数据存储的结构是链表结构。方便元素添加、删除的集合。
                      public void addFirst(E e) :将指定元素插入此列表的开头。
                      public void addLast(E e) :将指定元素添加到此列表的结尾。
                      public E getFirst() :返回此列表的第一个元素。
                      public E getLast() :返回此列表的最后一个元素。
                      public E removeFirst() :移除并返回此列表的第一个元素。
                      public E removeLast() :移除并返回此列表的最后一个元素。
                      public E pop() :从此列表所表示的堆栈处弹出一个元素。
                      public void push(E e) :将元素推入此列表所表示的堆栈。
                      public boolean isEmpty() ：如果列表不包含元素，则返回true。
Set接口
            集合取出元素的方式可以采用：迭代器、增强for。
                HashSet 存储的元素是不可重复的，并且元素都是无序的
                HashSet 是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性
                的方式依赖于： hashCode 与 equals 方法。
             LinkedHashSet
                    链表和哈希表组合的一个数据存储结构
Collections
            public static <T> boolean addAll(Collection<T> c, T... elements) :往集合中添加一些元素。
            public static void shuffle(List<?> list) 打乱顺序 :打乱集合顺序。
            public static <T> void sort(List<T> list) :将集合中元素按照默认规则排序。
            public static <T> void sort(List<T> list，Comparator<? super T> ) :将集合中元素按照指定规则排 序。
Comparator比较器
            public static <T> void sort(List<T> list) :将集合中元素按照默认规则排序
            public int compare(String o1, String o2)
Map集合
            Collection 中的集合称为单列集合， Map 中的集合称为双列集合
            HashMap ：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需
            要重写键的hashCode()方法、equals()方法。
            LinkedHashMap ：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链
            表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的
            hashCode()方法、equals()方法。
            public V put(K key, V value) : 把指定的键与指定的值添加到Map集合中。
            public V remove(Object key) : 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的
            值。
            public V get(Object key) 根据指定的键，在Map集合中获取对应的值。
            public Set<K> keySet() : 获取Map集合中所有的键，存储到Set集合中。
            public Set<Map.Entry<K,V>> entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。
            Map 集合遍历键找值方式
                    1. 获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示: keyset()
                    2. 遍历键的Set集合，得到每一个键。
                    3. 根据键，获取键所对应的值。方法提示: get(K key)
            Entry 键值对对象
                    public K getKey() ：获取Entry对象中的键。
                    public V getValue() ：获取Entry对象中的值。
                    public Set<Map.Entry<K,V>> entrySet() : 获取到Map集合中所有的键值对对象的集合(Set集合)。
                    1. 获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示: entrySet() 。
                    2. 遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。
                    3 . 通过键值对(Entry)对象，获取Entry对象中的键与值。 方法提示: getkey() getValue()
             LinkedHashMap
                     链表和哈希表组合的一个数据存储结构。