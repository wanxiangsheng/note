继承  多个类可以称为子类，单独那一个类称为父类、超类（superclass）或者基类。
        继承 ：就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接
        访问父类中的非私有的属性和行为。
        好处
            1. 提高代码的复用性。
            2. 类与类之间产生了关系，是多态的前提。
        成员变量不重名
        成员变量重名
        方法重写 ：  子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效
                          果，也称为重写或者复写。声明不变，重新实现
           super和this的含义
                 super ：代表父类的存储空间标识(可以理解为父亲的引用)。
                 this ：代表当前对象的引用(谁调用就代表谁)。
          继承的特点
                 Java只支持单继承，不支持多继承。
 抽象类
        抽象方法 ： 没有方法体的方法。
        抽象类 ：包含抽象方法的类。
    修饰符 abstract 返回值类型 方法名 (参数列表)
    如果一个类包含抽象方法，那么该类必须是抽象类。
    继承抽象类的子类必须重写父类所有的抽象方法 否则，该子类也必须声明为抽象类。

    抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。
    理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。
    2 . 抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。
    理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。
    3. 抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
    4 . 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象
    类
接口
        定义
          public interface 接口名称 {
            // 抽象方法
            // 默认方法
            // 静态方法
            // 私有方法
        }
        抽象方法：使用 abstract 关键字修饰，可以省略，没有方法体。该方法供子类实现使用
        默认方法：使用  default 修饰，不可省略，供子类调用或者子类重写。
        静态方法：使用  static 修饰，供接口直接调用。
        私有方法：使用  private 修饰，供接口中的默认方法或者静态方法调用。
       非抽象子类实现接口：
       1. 必须重写接口中所有抽象方法。
       2. 继承了接口的默认方法，即可以直接调用，也可以重写。
       静态与.class 文件相关，只能使用接口名调用，
       接口的多继承【了解】  一个接口能继承另一个或者多个接口

       接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用 public static final修饰。
       接口中，没有构造方法，不能创建对象。
       接口中，没有静态代码块。
多态
    多态 ： 是指同一行为，具有多个不同表现形式。
    继承或者实现【二选一】
    2. 方法的重写【意义体现：不重写，无意义】
    3. 父类引用指向子类对象【格式体现】
    父类类型 变量名 = new 子类对象；
    变量名.方法名();
    当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写
    后方法

    转型的异常
            变量名 instanceof 数据类型
            如果变量属于该数据类型，返回true。
            如果变量不属于该数据类型，返回false
final关键字
        类：被修饰的类，不能被继承。
        方法：被修饰的方法，不能被重写。
        变量：被修饰的变量，不能被重新赋值。
        修饰类
             final class 类名 {}
         修饰方法
                修饰符 final 返回值类型 方法名(参数列表){
                    //方法体
                }
         修饰变量
 内部类
    成员内部类 ：定义在类中方法外的类
                内部类可以直接访问外部类的成员，包括私有成员。
                外部类要访问内部类的成员，必须要建立内部类的对象。
                外部类名.内部类名 对象名 = new 外部类型().new 内部类型()；
      匿名内部类
                1. 定义子类
                2. 重写接口中的方法
                3. 创建子类对象
                4. 调用重写后的方法
                匿名内部类必须继承一个父类或者实现一个父接口。
引用类型
        class 作为成员变量
        interface 作为成员变量
        interface 作为方法参数和返回值类型