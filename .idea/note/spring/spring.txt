spring:
  耦合
      程序间的依赖关系
       我们应该做到  编译器不依赖 运行时才依赖
       解耦  就是降低程序间的依赖关系
        思路： 1 通过反射来创建对象，避免new关键字
               2  通过配置文件读取全限定类名

       工厂模式的出现 就是为了解耦
            public Object beanFactory(String beanName){
                  1  Object bean
                  2  编写配置文件 （如：  accout = cn.itcast.dao.impl.accountDaoImpl）
                  3  读取配置文件
                           new properties 对象  返回pro
                            beanfactory.class.getclassloader.getsourceAsstream("配置文件")  返回inputstream  in
                            pro.load(in)

                    beanpath = pro.getproperty(beanName)
                      再用  class.forName(beanpath).newinstance()    赋值bean

                  return bean;
            }

        IOC 控制反转
                本来可以new一个实现类  有完全的独立自主权   将这个权力给了工厂  让工厂根据特定的名称 读取文件配置 获取全限定类名
                控制权发生了转移  帮我们创建对象 降低程序间的依赖关系 削减程序间的耦合


        Spring 入门案例： 配置pom  org.springframe
                         配置bean.xml   需要导入相应版本的约束 <bean id  (这id为了后面的getBean的name 使用) >
                    创建对象 方法1       然后创建ApplicationContext ac =new ClassPathxmlApplicationContext()
                                调用ac中的getBean(传入xml  中 bean的  id  ，字节码类型  也就是接口。class )
                            由此 对象可以创建  注意  xml配置 只能创建默认的构造函数 没有默认函数  则无法创建
                            方法2   由工厂调用方法创建
                                    如  <bean id= instanceFactory  class = cn.itcast.factory.instanceFactory></bean>
                                            <bean id = accountDao   factory-bean = instanceFactory factoyr-method = getAccountDao ></bean>
                            方法3   静态方法的创建就
                                        <bean id accountService class = cn.itcast.factory.StaticFactory   factory-bean ="getAccountService">
                     bean 作用范围调整
                            scope标签的属性
                                取值 常用
                                        single  单例
                                        prototype   多例
                                        request
                                        session
                                        global-session
                       生命周期
                                 单例  出生     容器产生
                                       活着  容器在 就在
                                       死亡  容器销毁 就没了
                                 多例
                                        出生  对象创建时spring为我们创建
                                        活着   对象一直使用就在
                                        死亡    对象长时间不用 没有别的引用对象，由垃圾回收器收回
                    有默认构造函数 就不能有bean的反射创建对象了
                            需要用 <bean>
                                        construct-arg  参数类型有 type( 如 java.lang.String )  value name ref  index
                                    <construct-arg > </construct-arg>
                                    如果值是时间类型 需要用ref引入  <bean id= ...  class = java.util.Date>
                                    </bean>

